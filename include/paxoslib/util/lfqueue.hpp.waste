#pragma once
#include <atomic>
#include <assert.h>
namespace paxoslib
{
namespace util
{
template <class T>
class LFQueue
{
public:
  LFQueue()
  {
    Node *pNode = new Node;
    pNode->next = nullptr;
    m_pHead = pNode;
    m_pTail = pNode;
  }
  void push_back(const T &oItem)
  {
    Node *pNode = new Node{
        .value = oItem};
    pNode->next = nullptr;
    Node *pCurTail;
    Node *pCurTailNextExpected;
    do
    {
      pCurTail = m_pTail.load();
      pCurTailNextExpected = nullptr;
    } while (!std::atomic_compare_exchange_weak(&pCurTail->next, &pCurTailNextExpected, pNode));
    std::atomic_compare_exchange_weak(&m_pTail, &pCurTail, pNode);
  }
  void push_back(T &&oItem)
  {
    Node *pNode = new Node{
        .value = std::move(oItem)};
    pNode->next = nullptr;
    Node *pCurTail;
    Node *pCurTailNextExpected;
    do
    {
      pCurTail = m_pTail.load();
      pCurTailNextExpected = nullptr;
    } while (!std::atomic_compare_exchange_weak(&pCurTail->next, &pCurTailNextExpected, pNode));
    bool bResult = std::atomic_compare_exchange_weak(&m_pTail, &pCurTail, pNode);
    assert(bResult);
  }
  bool pop_front(T &oItem)
  {
    Node *pNode;
    do
    {
      pNode = m_pHead.load();
      if (pNode->next == nullptr)
      {
        return false;
      }
    } while (!std::atomic_compare_exchange_weak(&m_pHead, &pNode, pNode->next));
    oItem = std::move(pNode->next.load()->value);
    delete pNode;
    return true;
  }

private:
  struct Node
  {
    T value;
    std::atomic<Node *> next;
  };
  std::atomic<Node *> m_pHead;
  std::atomic<Node *> m_pTail;
};
}; // namespace util

}; // namespace paxoslib